function F(t,o,i){window.enmity.settings.set(t,o,i)}function x(t,o,i){return window.enmity.settings.get(t,o,i)}const{components:e}=window.enmity;e.Alert,e.Button,e.FlatList;const V=e.Image;e.ImageBackground,e.KeyboardAvoidingView,e.Modal,e.Pressable,e.RefreshControl;const N=e.ScrollView;e.SectionList,e.StatusBar,e.StyleSheet,e.Switch;const p=e.Text;e.TextInput,e.TouchableHighlight;const H=e.TouchableOpacity;e.TouchableWithoutFeedback,e.Touchable;const h=e.View;e.VirtualizedList,e.Form,e.FormArrow,e.FormCTA,e.FormCTAButton,e.FormCardSection,e.FormCheckbox,e.FormDivider,e.FormHint,e.FormIcon,e.FormInput,e.FormLabel,e.FormRadio;const c=e.FormRow,_=e.FormSection;e.FormSelect,e.FormSubLabel;const O=e.FormSwitch;e.FormTernaryCheckBox,e.FormText,e.FormTextColors,e.FormTextSizes;function Y(t){window.enmity.plugins.registerPlugin(t)}function j(...t){return window.enmity.modules.getByProps(...t)}function z(...t){return window.enmity.modules.getByName(...t)}window.enmity.modules.common;const w=window.enmity.modules.common.Constants;window.enmity.modules.common.Clipboard,window.enmity.modules.common.Assets,window.enmity.modules.common.Messages,window.enmity.modules.common.Clyde,window.enmity.modules.common.Avatars,window.enmity.modules.common.Native;const n=window.enmity.modules.common.React;window.enmity.modules.common.Dispatcher,window.enmity.modules.common.Storage;const G=window.enmity.modules.common.Toasts,b=window.enmity.modules.common.Dialog;window.enmity.modules.common.Token,window.enmity.modules.common.REST,window.enmity.modules.common.Settings,window.enmity.modules.common.Users;const K=window.enmity.modules.common.Navigation;window.enmity.modules.common.NavigationNative,window.enmity.modules.common.NavigationStack,window.enmity.modules.common.Theme,window.enmity.modules.common.Linking;const W=window.enmity.modules.common.StyleSheet;window.enmity.modules.common.ColorMap,window.enmity.modules.common.Components,window.enmity.modules.common.Locale,window.enmity.modules.common.Profiles,window.enmity.modules.common.Lodash,window.enmity.modules.common.Logger,window.enmity.modules.common.Flux,window.enmity.modules.common.SVG,window.enmity.modules.common.Scenes,window.enmity.modules.common.Moment;function X(t){return window.enmity.patcher.create(t)}var m="GlobalBadges",l="1.1.1",q="Adds global badges from other client mods",L=[{name:"HypedDomi",id:"354191516979429376"}],J="#E54B4B",D="https://raw.githubusercontent.com/HypedDomi/Enmity-Stuff/main/dist/GlobalBadges.js",A="https://github.com/HypedDomi/Enmity-Stuff/tree/main/GlobalBadges",S=["Support for Replugged"],s={name:m,version:l,description:q,authors:L,color:J,rawUrl:D,sourceUrl:A,changelog:S};const{native:y}=window.enmity;function Q(){y.reload()}y.version,y.build,y.device,y.version;async function R(){let t=(await(await fetch(`${D}?${Math.random()}`)).text()).match(/\d\.\d\.\d+/g);if(!(t!=null&&t.length))return!1;t=t[0].replace('"',""),t=t.split(".").map(i=>parseInt(i));const o=l.split(".").map(i=>parseInt(i));return t[0]>o[0]||t[0]==o[0]&&t[1]>o[1]?!0:t[0]==o[0]&&t[1]==o[1]&&t[2]>o[2]}const Z=t=>{let o=[];fetch(t).then(i=>i.text()).then(i=>o=i.match(/\d\.\d\.\d+/g)),window.enmity.plugins.installPlugin(t,({data:i})=>{i=="installed_plugin"||i=="overridden_plugin"?b.show({title:`Updated ${m}`,body:`Successfully updated to version **${o!=null&&o.length?o[0]:l}**. Would you like to reload Discord now?`,confirmText:"Reload",cancelText:"Later",onConfirm:()=>Q()}):console.log(`[${m}] Plugin failed to update to version ${l}`)})};function U(){b.show({title:"Plugin Updater",body:`**${m}** has an update. Do you want to update now?`,confirmText:"Update",cancelText:"No",onConfirm:()=>{F(m,"_didUpdate",!0),Z(`${D}?${Math.random()}`)}})}function B(){!S.length||b.show({title:`${m} - v${l}`,body:`- ${S.join(`
- `)}`,confirmText:"OK",onConfirm:()=>F(m,"_changelog",l)})}const P=j("transitionToGuild");var ee=({settings:t})=>{const o=W.createThemedStyleSheet({item:{color:w.ThemeColorMap.TEXT_MUTED},text_container:{paddingLeft:15,paddingTop:5,flexDirection:"column",flexWrap:"wrap"},main_text:{opacity:.975,letterSpacing:.25},header:{color:w.ThemeColorMap.HEADER_PRIMARY,fontFamily:w.Fonts.DISPLAY_BOLD,fontSize:25,letterSpacing:.25},sub_header:{color:w.ThemeColorMap.HEADER_SECONDARY,opacity:.975,fontSize:12.75}}),[i,u]=n.useState(),[a,f]=n.useState();return n.createElement(n.Fragment,null,n.createElement(N,{onTouchStart:r=>{u(r.nativeEvent.pageX),f(r.nativeEvent.pageY)},onTouchEnd:r=>{i-r.nativeEvent.pageX<-100&&a-r.nativeEvent.pageY<40&&a-r.nativeEvent.pageY>-40&&K.pop()}},n.createElement(h,null,n.createElement(h,{style:o.text_container},n.createElement(p,{style:[o.main_text,o.header]},m),n.createElement(h,{style:{flexDirection:"row"}},n.createElement(p,{style:[o.main_text,o.sub_header]},"Author:"),n.createElement(p,{style:[o.main_text,o.sub_header,{paddingLeft:4,fontFamily:w.Fonts.DISPLAY_BOLD}]},` ${L.map(r=>r.name).join(", ")}`)),n.createElement(h,{style:{flexDirection:"row"}},n.createElement(p,{style:[o.main_text,o.sub_header]},"Version:"),n.createElement(p,{style:[o.main_text,o.sub_header,{paddingLeft:4,fontFamily:w.Fonts.DISPLAY_BOLD}]},` ${l}`)))),n.createElement(_,{title:"Updates"},n.createElement(c,{label:"Check for Updates on startup",subLabel:"Checks automatically for updates when starting the Plugin",trailing:n.createElement(O,{value:t.getBoolean("autoUpdateCheck",!0),onValueChange:()=>t.toggle("autoUpdateCheck",!0)})}),n.createElement(c,{label:"Check for Updates",trailing:c.Arrow,onPress:()=>{R().then(r=>{r?U():b.show({title:"Plugin Updater",body:`**${m}** is already on the latest version (**${l}**)`,confirmText:"OK"})})}}),n.createElement(c,{label:"Show Changelog",subLabel:`Shows the changelog for v${l}`,trailing:c.Arrow,onPress:()=>B(),disabled:!S.length})),n.createElement(_,{title:"Source"},n.createElement(c,{label:"Source",subLabel:`See the Source Code for ${m}`,trailing:c.Arrow,onPress:()=>P==null?void 0:P.openURL(A)}))))};const k="https://clientmodbadges-api.herokuapp.com/",E=new Map,te=1e3*60*15,T={aliucord:{dev:{name:"Aliucord Developer"},donor:{name:"Aliucord Donor"},contributor:{name:"Aliucord Contributor"}},betterdiscord:{developer:{name:"BetterDiscord Developer"}},replugged:{developer:{name:"Replugged Developer"},staff:{name:"Replugged Staff"},support:{name:"Replugged Support"},contributor:{name:"Replugged Contributor"},translator:{name:"Replugged Translator"},hunter:{name:"Replugged Bug Hunter"},early:{name:"Replugged Early User"}},velocity:{developer:{name:"Velocity Developer"},translator:{name:"Velocity Translator"}},vencord:{contributor:{name:"Vencord Contributor"}}},oe=(t,o)=>{var i,u;!E.has(t)||((i=E.get(t))==null?void 0:i.expires)<Date.now()?fetch(`${k}users/${t}`).then(a=>a.json()).then(a=>{E.set(t,{badges:a,expires:Date.now()+te}),o(a)}):o((u=E.get(t))==null?void 0:u.badges)},ne=({name:t,img:o})=>{const i={wrapper:{alignItems:"center",flexDirection:"row",justifyContent:"flex-end"},image:{width:24,height:24,resizeMode:"contain",marginHorizontal:2}};return n.createElement(h,{style:i.wrapper},n.createElement(H,{onPress:()=>G.open({content:t,source:{uri:o}})},n.createElement(V,{style:i.image,source:{uri:o}})))},I=X(s.name),ie={...s,onStart(){x(s.name,"_didUpdate",!1)||(x(s.name,"autoUpdateCheck",!0)&&R().then(o=>{o&&U()}),x(s.name,"_changelog",s.version)!==s.version&&B()),F(s.name,"_didUpdate",!1);const t=z("ProfileBadges",{all:!0,default:!1});for(const o of t)I.after(o,"default",(i,[{user:{id:u}}],a)=>{const[f,r]=n.useState({});n.useEffect(()=>oe(u,r),[]);const v=[];if(Object.keys(f).forEach(d=>{f[d].forEach(C=>{d=="velocity"&&(C=C.replace("Velocity ",""));let[g,$]=C.split(" ");if(g=g.toLowerCase(),T[d]&&T[d][g]){const M=$?`${T[d][g].name} ${$}`:T[d][g].name;v.push(n.createElement(ne,{name:M,img:`${k}badges/${d}/${g}`}))}})}),!v.length)return a;a.props.badges?a.props.badges.push(...v):a.props.children.push(...v)})},onStop(){I.unpatchAll()},getSettingsPanel({settings:t}){return n.createElement(ee,{settings:t})}};Y(ie);
