function F(o,t,i){window.enmity.settings.set(o,t,i)}function x(o,t,i){return window.enmity.settings.get(o,t,i)}const{components:e}=window.enmity;e.Alert,e.Button,e.FlatList;const M=e.Image;e.ImageBackground,e.KeyboardAvoidingView,e.Modal,e.Pressable,e.RefreshControl;const V=e.ScrollView;e.SectionList,e.StatusBar,e.StyleSheet,e.Switch;const g=e.Text;e.TextInput,e.TouchableHighlight;const j=e.TouchableOpacity;e.TouchableWithoutFeedback,e.Touchable;const w=e.View;e.VirtualizedList,e.Form,e.FormArrow,e.FormCTA,e.FormCTAButton,e.FormCardSection,e.FormCheckbox,e.FormDivider,e.FormHint,e.FormIcon,e.FormInput,e.FormLabel,e.FormRadio;const d=e.FormRow,A=e.FormSection;e.FormSelect,e.FormSubLabel;const N=e.FormSwitch;e.FormTernaryCheckBox,e.FormText,e.FormTextColors,e.FormTextSizes;function O(o){window.enmity.plugins.registerPlugin(o)}function H(...o){return window.enmity.modules.getByProps(...o)}function Y(...o){return window.enmity.modules.getByName(...o)}window.enmity.modules.common;const p=window.enmity.modules.common.Constants;window.enmity.modules.common.Clipboard,window.enmity.modules.common.Assets,window.enmity.modules.common.Messages,window.enmity.modules.common.Clyde,window.enmity.modules.common.Avatars,window.enmity.modules.common.Native;const n=window.enmity.modules.common.React;window.enmity.modules.common.Dispatcher,window.enmity.modules.common.Storage;const z=window.enmity.modules.common.Toasts,S=window.enmity.modules.common.Dialog;window.enmity.modules.common.Token,window.enmity.modules.common.REST,window.enmity.modules.common.Settings,window.enmity.modules.common.Users;const G=window.enmity.modules.common.Navigation;window.enmity.modules.common.NavigationNative,window.enmity.modules.common.NavigationStack,window.enmity.modules.common.Theme,window.enmity.modules.common.Linking;const K=window.enmity.modules.common.StyleSheet;window.enmity.modules.common.ColorMap,window.enmity.modules.common.Components,window.enmity.modules.common.Locale,window.enmity.modules.common.Profiles,window.enmity.modules.common.Lodash,window.enmity.modules.common.Logger,window.enmity.modules.common.Flux,window.enmity.modules.common.SVG,window.enmity.modules.common.Scenes,window.enmity.modules.common.Moment;function W(o){return window.enmity.patcher.create(o)}var r="GlobalBadges",s="1.1.0",X="Adds global badges from other client mods",L=[{name:"HypedDomi",id:"354191516979429376"}],q="#E54B4B",D="https://raw.githubusercontent.com/HypedDomi/Enmity-Stuff/main/dist/GlobalBadges.js",U="https://github.com/HypedDomi/Enmity-Stuff/tree/main/GlobalBadges",E=["Switch to my own API","Add support for more mods"],l={name:r,version:s,description:X,authors:L,color:q,rawUrl:D,sourceUrl:U,changelog:E};const{native:h}=window.enmity;function J(){h.reload()}h.version,h.build,h.device,h.version;async function P(){let o=(await(await fetch(`${D}?${Math.random()}`)).text()).match(/\d\.\d\.\d+/g);if(!(o!=null&&o.length))return!1;o=o[0].replace('"',""),o=o.split(".").map(i=>parseInt(i));const t=s.split(".").map(i=>parseInt(i));return o[0]>t[0]||o[0]==t[0]&&o[1]>t[1]?!0:o[0]==t[0]&&o[1]==t[1]&&o[2]>t[2]}const Q=o=>{let t=[];fetch(o).then(i=>i.text()).then(i=>t=i.match(/\d\.\d\.\d+/g)),window.enmity.plugins.installPlugin(o,({data:i})=>{i=="installed_plugin"||i=="overridden_plugin"?S.show({title:`Updated ${r}`,body:`Successfully updated to version **${t!=null&&t.length?t[0]:s}**. Would you like to reload Discord now?`,confirmText:"Reload",cancelText:"Later",onConfirm:()=>J()}):console.log(`[${r}] Plugin failed to update to version ${s}`)})};function $(){S.show({title:"Plugin Updater",body:`**${r}** has an update. Do you want to update now?`,confirmText:"Update",cancelText:"No",onConfirm:()=>{F(r,"_didUpdate",!0),Q(`${D}?${Math.random()}`)}})}function B(){!E.length||S.show({title:`${r} - v${s}`,body:`- ${E.join(`
- `)}`,confirmText:"OK",onConfirm:()=>F(r,"_changelog",s)})}const k=H("transitionToGuild");var Z=({settings:o})=>{const t=K.createThemedStyleSheet({item:{color:p.ThemeColorMap.TEXT_MUTED},text_container:{paddingLeft:15,paddingTop:5,flexDirection:"column",flexWrap:"wrap"},main_text:{opacity:.975,letterSpacing:.25},header:{color:p.ThemeColorMap.HEADER_PRIMARY,fontFamily:p.Fonts.DISPLAY_BOLD,fontSize:25,letterSpacing:.25},sub_header:{color:p.ThemeColorMap.HEADER_SECONDARY,opacity:.975,fontSize:12.75}}),[i,u]=n.useState(),[a,f]=n.useState();return n.createElement(n.Fragment,null,n.createElement(V,{onTouchStart:m=>{u(m.nativeEvent.pageX),f(m.nativeEvent.pageY)},onTouchEnd:m=>{i-m.nativeEvent.pageX<-100&&a-m.nativeEvent.pageY<40&&a-m.nativeEvent.pageY>-40&&G.pop()}},n.createElement(w,null,n.createElement(w,{style:t.text_container},n.createElement(g,{style:[t.main_text,t.header]},r),n.createElement(w,{style:{flexDirection:"row"}},n.createElement(g,{style:[t.main_text,t.sub_header]},"Author:"),n.createElement(g,{style:[t.main_text,t.sub_header,{paddingLeft:4,fontFamily:p.Fonts.DISPLAY_BOLD}]},` ${L.map(m=>m.name).join(", ")}`)),n.createElement(w,{style:{flexDirection:"row"}},n.createElement(g,{style:[t.main_text,t.sub_header]},"Version:"),n.createElement(g,{style:[t.main_text,t.sub_header,{paddingLeft:4,fontFamily:p.Fonts.DISPLAY_BOLD}]},` ${s}`)))),n.createElement(A,{title:"Updates"},n.createElement(d,{label:"Check for Updates on startup",subLabel:"Checks automatically for updates when starting the Plugin",trailing:n.createElement(N,{value:o.getBoolean("autoUpdateCheck",!0),onValueChange:()=>o.toggle("autoUpdateCheck",!0)})}),n.createElement(d,{label:"Check for Updates",trailing:d.Arrow,onPress:()=>{P().then(m=>{m?$():S.show({title:"Plugin Updater",body:`**${r}** is already on the latest version (**${s}**)`,confirmText:"OK"})})}}),n.createElement(d,{label:"Show Changelog",subLabel:`Shows the changelog for v${s}`,trailing:d.Arrow,onPress:()=>B(),disabled:!E.length})),n.createElement(A,{title:"Source"},n.createElement(d,{label:"Source",subLabel:`See the Source Code for ${r}`,trailing:d.Arrow,onPress:()=>k==null?void 0:k.openURL(U)}))))};const T=new Map,ee=1e3*60*15,y={aliucord:{dev:{name:"Aliucord Developer",img:"https://cdn.discordapp.com/emojis/860599530956783656.png"},donor:{name:"Aliucord Donor",img:"https://cdn.discordapp.com/emojis/859801776232202280.png"},contributor:{name:"Aliucord Contributor",img:"https://cdn.discordapp.com/emojis/894346480943530015.png"}},betterdiscord:{developer:{name:"BetterDiscord Developer",img:"https://cdn.discordapp.com/emojis/1019671156523012136.png"}},velocity:{developer:{name:"Velocity Developer",img:"https://cdn.discordapp.com/emojis/959998683770941460.png"},translator:{name:"Velocity Translator",img:"https://cdn.discordapp.com/emojis/959998683770941460.png"}},vencord:{contributor:{name:"Vencord Contributor",img:"https://media.discordapp.net/stickers/1026517526106087454.png"}}},oe=(o,t)=>{var i,u;!T.has(o)||((i=T.get(o))==null?void 0:i.expires)<Date.now()?fetch(`https://clientmodbadges-api.herokuapp.com/users?user=${o}`).then(a=>a.json()).then(a=>{T.set(o,{badges:a,expires:Date.now()+ee}),t(a)}):t((u=T.get(o))==null?void 0:u.badges)},te=({name:o,img:t})=>{const i={wrapper:{alignItems:"center",flexDirection:"row",justifyContent:"flex-end"},image:{width:24,height:24,resizeMode:"contain",marginHorizontal:2}};return n.createElement(w,{style:i.wrapper},n.createElement(j,{onPress:()=>z.open({content:o,source:{uri:t}})},n.createElement(M,{style:i.image,source:{uri:t}})))},I=W(l.name),ne={...l,onStart(){x(l.name,"_didUpdate",!1)||(x(l.name,"autoUpdateCheck",!0)&&P().then(t=>{t&&$()}),x(l.name,"_changelog",l.version)!==l.version&&B()),F(l.name,"_didUpdate",!1);const o=Y("ProfileBadges",{all:!0,default:!1});for(const t of o)I.after(t,"default",(i,[{user:{id:u}}],a)=>{const[f,m]=n.useState({});n.useEffect(()=>oe(u,m),[]);const v=[];if(Object.keys(f).forEach(c=>{f[c].forEach(C=>{c=="velocity"&&(C=C.replace("Velocity ",""));const[b,_]=C.toLowerCase().split(" ");if(y[c]&&y[c][b]){const R=_?`${y[c][b].name} ${_}`:y[c][b].name;v.push(n.createElement(te,{name:R,img:y[c][b].img}))}})}),!v.length)return a;a.props.badges?a.props.badges.push(...v):a.props.children.push(...v)})},onStop(){I.unpatchAll()},getSettingsPanel({settings:o}){return n.createElement(Z,{settings:o})}};O(ne);
